#!/usr/bin/php
<?php

/**
 * Requires php 5.4 or up
 *
 * @author hitman2491@gmail.com
 * @version 0.7
 */
class Start
{
    private $version = 0.7;
    private $currentDir;
    private $gameInfo;
    private $wineConfig;
    private $userName;
    private $args;
    private $diff;
    private $monitors;
    private $xrandr;
    private $vulkan;
    private $useXrandr = true;
    private $infoFile = 'game_info.ini';
    private $gpu;
    private $config;


    /**
     * Start constructor.
     * @param string[] $arguments
     */
    public function __construct($arguments)
    {
        $this->args = array_splice($arguments, 1);

        $this->currentDir = __DIR__;
        $gameInfo         = "{$this->currentDir}/game_info";
        $winePrefix       = "{$this->currentDir}/prefix";

        $this->gameInfo = [

            'DIR'        => $gameInfo,
            'DLL32'      => "{$gameInfo}/dlls",
            'DLL64'      => "{$gameInfo}/dlls64",
            'ADDITIONAL' => "{$gameInfo}/additional",
            'DATA'       => "{$gameInfo}/data",
            'REGS'       => "{$gameInfo}/regs",
            'HOOKS'      => "{$gameInfo}/hooks",
            'INFOFILE'   => "{$gameInfo}/{$this->infoFile}",

        ];

        $this->wineConfig = [

            'WINE'       => "{$this->currentDir}/wine/bin/wine",
            'REGEDIT'    => "{$this->currentDir}/wine/bin/regedit",
            'WINEBOOT'   => "{$this->currentDir}/wine/bin/wineboot",
            'WINEFILE'   => "{$this->currentDir}/wine/bin/winefile",
            'WINECFG'    => "{$this->currentDir}/wine/bin/winecfg",
            'WINESERVER' => "{$this->currentDir}/wine/bin/wineserver",

            'WINEPREFIX'             => $winePrefix,
            'DRIVE_C'                => "{$winePrefix}/drive_c",
            'WINEDEBUG'              => '-all',
            'WINEARCH'               => 'win32',
            'WINEDLLOVERRIDES'       => '', // 'winemenubuilder.exe=d;nvapi,nvapi64,mscoree,mshtml='
            'CSMT'                   => true,
            'SANDBOX'                => true,
            'PULSE'                  => true,
            'WINVER'                 => 'win7',
            'DXVK'                   => false,
            'WINETRICKS_UPDATE'      => false,
            'VIRTUAL_DESKTOP_ENABLE' => false,
            'VIRTUAL_DESKTOP'        => 'explorer /desktop=Wine,800x600',

        ];


        $this->init();
    }

    public function start()
    {
        $method = 'game';
        $args = [];

        if (!$this->args) {
            $method = 'game';
        } else {
            $method = $this->args[0];
            $args   = array_splice($this->args, 1);
        }

        if ($method === 'diff') {
            $this->diff = $this->getSnapshot();
            $method = $args[0]?:'game';
            $args   = array_splice($args, 1);
        }

        if ($method === 'debug') {
            $this->wineConfig['WINEDEBUG'] = '';
            $method = $args[0]?:'game';
            $args   = array_splice($args, 1);
        }

        $this->version([]);

        if ($method === 'version') {
            exit(1);
        }

        $this->wineVersion();

        if ($this->wineConfig['WINETRICKS_UPDATE']) {
            $this->downloadWinetricks();
        }

        $this->xrandrVersion();
        $this->vulkanVersion();
        $this->checkLibs();
        $this->createPrefix();

        if (method_exists($this, $method)) {
            $this->monitors = $this->resolutions();

            if ($method === 'game') {
                $this->firedHooksBeforeRun();
            }

            $this->{$method}($args);
            $this->log('');

            if ($method === 'game') {
                $this->firedHooksAfterExit();
            }

            if ($this->diff) {
                $this->diff();
            }

            $this->restoreResolutions();
        } else {
            $this->log("Error, method \"{$method}\" not support.\n");
        }
    }

    private function game($args)
    {
        $this->gameVersion();

        $cmd = $this->quoteArgs($args);
        $desktop = $this->wineConfig['VIRTUAL_DESKTOP_ENABLE'] ? $this->wineConfig['VIRTUAL_DESKTOP'] : '';
        $this->runExternal("cd \"{$this->gameInfo['GAME_PATH']}/{$this->gameInfo['PATH']}/\" && \"{$this->wineConfig['WINE']}\" {$desktop} \"{$this->gameInfo['GAME_EXE']}\" {$cmd}", true);
    }

    private function config($args)
    {
        if ($args) {
            $this->infoFile = $args[0];
            $this->gameInfo['INFOFILE'] = "{$this->gameInfo['DIR']}/{$this->infoFile}";
            $this->init();
            $this->game([]);
        }
    }

    private function winetricks($args)
    {
        $this->downloadWinetricks();

        if (file_exists("{$this->currentDir}/winetricks")) {
            $this->wineConfig['WINEDEBUG'] = '';
            $cmd = $this->quoteArgs($args);
            $this->runExternal("\"{$this->currentDir}/winetricks\" {$cmd}", true);
        } else {
            $this->log('Not found winetricks.');
        }
    }

    private function fm($args)
    {
        $this->wineConfig['WINEDEBUG'] = '';
        $cmd = $this->quoteArgs($args);
        $this->runExternal("\"{$this->wineConfig['WINEFILE']}\" {$cmd}", true);
    }

    private function cfg($args)
    {
        $cmd = $this->quoteArgs($args);
        $this->runExternal("\"{$this->wineConfig['WINECFG']}\" {$cmd}", true);
    }

    private function wine($args)
    {
        $cmd = $this->quoteArgs($args);
        $this->runExternal("\"{$this->wineConfig['WINE']}\" {$cmd}", true);
    }

    private function kill($args)
    {
        $cmd = $this->quoteArgs($args);

        if ($cmd) {
            $this->runExternal("\"{$this->wineConfig['WINESERVER']}\" {$cmd}", true);
        } else {
            $this->runExternal("\"{$this->wineConfig['WINESERVER']}\" -k", true);
        }
    }

    private function reg($args)
    {
        $this->regedit($args);
    }

    private function regedit($args)
    {
        $cmd = $this->quoteArgs($args);
        $this->runExternal("\"{$this->wineConfig['REGEDIT']}\" {$cmd}", true);
    }

    private function update($args)
    {
        $cmd = $this->quoteArgs($args);
        $newStart = file_get_contents('https://raw.githubusercontent.com/hitman249/wine-helpers/master/start');

        if ($newStart) {
            file_put_contents("{$this->currentDir}/start", $newStart);
            $this->runExternal("chmod +x \"{$this->currentDir}/start\"");
            $this->log("Success self update!\n");
        }
    }

    private function icon($args)
    {
        $isDelete = in_array(trim(reset($args)), ['delete', 'remove', 'purge'], true);
        $user     = get_current_user();
        $home     = getenv("HOME") ?: "/home/{$user}";
        $local    = "{$home}/.local/share/applications";

        if (!file_exists($local)) {
            if (!mkdir($local, 0775, true) && !is_dir($local)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $local));
            }
        }

        $paths    = [$local];
        $find     = [
            "{$home}/Рабочий стол/Games",
            "{$home}/Рабочий стол/games",
            "{$home}/Рабочий стол/Игры",
            "{$home}/Рабочий стол/игры",
            "{$home}/Desktop/Games",
            "{$home}/Desktop/games",
            "{$home}/Desktop/Игры",
            "{$home}/Desktop/игры",
            "{$home}/Рабочий стол",
            "{$home}/Desktop",
        ];


        if ($isDelete) {

            $removes = [];

            foreach (array_merge($paths, $find) as $item) {
                $v1 = "{$item}/{$this->gameInfo['GAME']}";
                $v2 = "{$v1}.desktop";

                if (file_exists($v1) && !is_dir($v1)) {
                    $removes[] = $v1;
                    unlink($v1);
                } elseif (file_exists($v2) && !is_dir($v2)) {
                    $removes[] = $v2;
                    unlink($v2);
                }
            }

            if ($removes) {

                $this->log("\nSuccess icon delete!\n");

                foreach ($removes as $remove) {
                    $this->log("Remove file \"{$remove}\"");
                }
            } else {
                $this->log("\nIcons not found!\n");
            }

        } else {

            $root     = glob("{$this->currentDir}/*.png");
            $gameInfo = glob("{$this->currentDir}/game_info/*.png");
            $icons    = array_filter(array_merge($root, $gameInfo));
            $pngPath  = '';

            foreach ($find as $desktop) {
                if (file_exists($desktop) && is_dir($desktop)) {
                    $paths[] = $desktop;
                    break;
                }
            }

            if (count($icons) > 1) {

                $this->log('Select icon:');

                foreach ($icons as $i => $png) {
                    $num = $i+1;
                    $relativePath = $this->relativePath($png);
                    $this->log("{$num}) ./{$relativePath}");
                }

                $i = (int)trim(fgets( STDIN )) - 1;
                $pngPath = $icons[$i];

            } else {
                $pngPath = reset($icons);
            }

            $icon = "[Desktop Entry]
Version=1.0
Exec={$this->currentDir}/start
Path={$this->currentDir}
Icon={$pngPath}
Name={$this->gameInfo['GAME']}
Terminal=false
TerminalOptions=
Type=Application
Categories=Game";

            $puts = [];
            foreach ($paths as $path) {
                $v1 = "{$path}/{$this->gameInfo['GAME']}";
                $v2 = "{$v1}.desktop";
                if (file_exists($v2) && !is_dir($v2)) {
                    file_put_contents($v2, $icon);
                    $puts[] = $v2;
                    $this->runExternal("chmod +x \"{$v2}\"");
                } elseif (file_exists($v1) && !is_dir($v1)) {
                    file_put_contents($v1, $icon);
                    $puts[] = $v1;
                    $this->runExternal("chmod +x \"{$v1}\"");
                } else {
                    file_put_contents($v2, $icon);
                    $puts[] = $v2;
                    $this->runExternal("chmod +x \"{$v2}\"");
                }
            }

            $this->log("\nSuccess icon create!\n");

            foreach ($puts as $put) {
                $this->log("Put file \"{$put}\"");
            }

            $this->log('');
        }
    }

    private function settings($args)
    {
        if ($this->config && !empty($this->config['hooks']) && !empty($this->config['hooks']['settings'])) {
            $this->firedHooksCreatePrefix('settings');
        } else {
            $this->log("This game has no settings!\n");
        }
    }

    private function version($args)
    {
        $cmd = $this->quoteArgs($args);

        $this->log("This script version {$this->version}\n\nhttps://github.com/hitman249/wine-helpers\n");
    }

    private function help($args)
    {
        $help = [
            'Help:',
            './start                           - Run game.',
            './start settings                  - Settings game.',
            './start winetricks d3dx9          - Winetricks install d3dx9.',
            './start cfg                       - Configure.',
            './start fm                        - File Manager.',
            './start regedit (reg)             - Windows Registry Editor.',
            './start kill                      - Kill this instance Wine.',
            './start help',
            '',
            './start diff                      - Enable change files analyze from system32, syswow64 folders.',
            'or',
            './start diff fm',
            './start diff winetricks d3dx9',
            './start diff cfg',
            'and others',
            '',
            './start debug                    - Enable debug mode, work analog "diff".',
            './start wine                     - Get Wine Instance.',
            './start config game_info1.ini    - Use other config.',
            './start update                   - Update this script.',
            './start icon                     - Create desktop icon.',
            './start icon delete (remove)     - Delete desktop icon.',
            './start version',
        ];

        $this->log(implode("\n", $help));
    }

    private function createPrefix()
    {
        if (!file_exists($this->wineConfig['WINEPREFIX'])) {
            $this->runExternal("\"{$this->wineConfig['WINEBOOT']}\" && \"{$this->wineConfig['WINESERVER']}\" -w");


            /**
             * Apply reg files
             */
            if (file_exists($this->gameInfo['REGS'])) {
                $regs = array_map('file_get_contents', glob("{$this->gameInfo['REGS']}/*.reg"));
                file_put_contents("{$this->gameInfo['REGS']}/tmp.reg", implode("\n", $regs));
                $this->runExternal("\"{$this->wineConfig['REGEDIT']}\" \"{$this->gameInfo['REGS']}/tmp.reg\"");
                unlink("{$this->gameInfo['REGS']}/tmp.reg");
            }


            /**
             * Copy required dlls and override them
             */
            $this->updateDlls();


            /**
             * Sandbox the prefix; Borrowed from winetricks scripts
             */
            if ($this->wineConfig['SANDBOX']) {
                unlink("{$this->wineConfig['WINEPREFIX']}/dosdevices/z:");

                foreach (glob("{$this->wineConfig['DRIVE_C']}/users/{$this->userName}/*") as $filePath) {
                    if (is_link($filePath)) {
                        unlink($filePath);
                        if (!mkdir($filePath, 0775, true) && !is_dir($filePath)) {
                            throw new \RuntimeException(sprintf('Directory "%s" was not created', $filePath));
                        }
                    }
                }

                $this->runExternal("\"{$this->wineConfig['REGEDIT']}\" /d 'HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Explorer\Desktop\Namespace\{9D20AAE8-0625-44B0-9CA7-71889C2254D9}'");
                file_put_contents("{$this->wineConfig['WINEPREFIX']}/.update-timestamp", 'disable');
            }


            /**
             * Create symlinks to additional folders
             */
            if (file_exists($this->gameInfo['ADDITIONAL']) && file_exists("{$this->gameInfo['ADDITIONAL']}/path.txt")) {

                $folders = array_filter(array_map('trim', explode("\n", file_get_contents("{$this->gameInfo['ADDITIONAL']}/path.txt"))));

                if ($folders) {
                    $adds = glob("{$this->gameInfo['ADDITIONAL']}/*/");
                    $isCyrillic = trim($this->runExternal('locale | grep LANG=ru'));

                    if (count($adds) >= count($folders)) {
                        foreach ($adds as $i => $path) {

                            $add = str_replace('--REPLACE_WITH_USERNAME--', $this->userName, trim($folders[$i], " \t\n\r\0\x0B/"));

                            if (!$isCyrillic) {
                                $add = str_replace('Мои документы', 'My Documents', $add);
                            }

                            $gameInfoAddDir = $this->relativePath($path);

                            $this->runExternal("mkdir -p \"{$this->wineConfig['DRIVE_C']}/{$add}\" && rm -r \"{$this->wineConfig['DRIVE_C']}/{$add}\" && ln -sfr \"{$gameInfoAddDir}\" \"{$this->wineConfig['DRIVE_C']}/{$add}\"");
                        }
                    } else {
                        $this->log('Not the same count dirs in "game_info/additional/dir_*" and "game_info/additional/path.txt" file.');
                    }
                }
            }


            /**
             * Enable or disable CSMT
             */
            $this->updateCsmt();


            /**
             * Set sound driver to PulseAudio; Borrowed from winetricks
             */
            $this->updatePulse();


            /**
             * Create symlink to game directory
             */
            $this->createGameDirectory();


            /**
             * Set windows version; Borrowed from winetricks
             */
            $this->updateWinVersion();


            /**
             * Install latest dxvk (d3d11.dll and dxgi.dll)
             */
            $this->updateDxvk();


            /**
             * Fired hooks
             */
            $this->firedHooksCreatePrefix();
            $this->firedHooksGPU();
        }
    }

    private function init()
    {
        if (posix_geteuid() === 0) {
            $this->log('Do not run this script as root!');
            exit(0);
        }

        if (!file_exists($this->wineConfig['WINE'])) {
            $this->wineConfig['WINE']       = 'wine';
            $this->wineConfig['REGEDIT']    = 'regedit';
            $this->wineConfig['WINEBOOT']   = 'wineboot';
            $this->wineConfig['WINEFILE']   = 'winefile';
            $this->wineConfig['WINECFG']    = 'winecfg';
            $this->wineConfig['WINESERVER'] = 'wineserver';
        }

        $this->userName = get_current_user();

        $this->gpu = $this->getTypeGPU();

        if (!file_exists($this->gameInfo['DIR'])) {

            if (file_exists("{$this->currentDir}/wine/bin")) {
                $this->runExternal("chmod +x -R \"{$this->currentDir}/wine/bin/\"");
            }

            foreach ($this->gameInfo as $key => $path) {
                if ($key === 'INFOFILE') {
                    continue;
                }
                if (!mkdir($path, 0775, true) && !is_dir($path)) {
                    throw new \RuntimeException(sprintf('Directory "%s" was not created', $path));
                }
            }


            $readme = 'readme.txt';


            /**
             * game_info/readme.txt
             */
            file_put_contents(
                "{$this->gameInfo['DIR']}/{$readme}",
                "Эта директория необходима для работы скрипта.

Описание директорий/файлов:

game_info.txt - информация об игре (обязательная директория)
data - каталог с игрой (обязательная директория)
dlls - дополнительные dll файлы (необязательная директория)
dlls64 - дополнительные dll файлы (необязательная директория)
additional - специфичные для игры настройки (необязательная директория)
regs - файлы реестра windows (необязательная директория)"
            );


            /**
             * game_info/game_info.ini
             */
            file_put_contents($this->gameInfo['INFOFILE'], $this->getDefaultConfig());


            /**
             * game_info/data/readme.txt
             */
            file_put_contents(
                "{$this->gameInfo['DATA']}/{$readme}",
                "Здесь должна находиться игра."
            );


            /**
             * game_info/dlls/readme.txt
             */
            file_put_contents(
                "{$this->gameInfo['DLL32']}/{$readme}",
                "В эту директорию нужно класть необходимые игре DLL файлы. Если таких нет
директорию можно удалить."
            );


            /**
             * game_info/dlls64/readme.txt
             */
            file_put_contents(
                "{$this->gameInfo['DLL64']}/{$readme}",
                "В эту директорию нужно класть необходимые игре DLL файлы. Если таких нет
директорию можно удалить."
            );


            /**
             * game_info/regs/readme.txt
             */
            file_put_contents(
                "{$this->gameInfo['REGS']}/{$readme}",
                "Здесь должны находиться .reg файлы."
            );


            /**
             * game_info/additional/readme.txt
             */
            file_put_contents(
                "{$this->gameInfo['ADDITIONAL']}/{$readme}",
                "Специфичные для игры настройки. Класть в директории dir_1, dir_2, dir_3
и т.д. Путь для копирования (относительно drive_c) нужно указывать
в файле path.txt. Первая строчка для dir_1, вторая - для dir_2 и т.д.
Всю директорию additional можно удалить, если к игре не нужно заранее
применять настройки.

--REPLACE_WITH_USERNAME-- в файле path.txt заменяется на имя пользователя
автоматически."
            );


            /**
             * game_info/additional/path.txt
             */
            file_put_contents(
                "{$this->gameInfo['ADDITIONAL']}/path.txt",
                "users/--REPLACE_WITH_USERNAME--/Мои документы"
            );

            if (!mkdir("{$this->gameInfo['ADDITIONAL']}/dir_1", 0775, true) && !is_dir($path)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $path));
            }


            /**
             * game_info/additional/dir_1/readme.txt
             */
            file_put_contents(
                "{$this->gameInfo['ADDITIONAL']}/dir_1/{$readme}",
                "Здесь должно находиться содержимое директории dir_1."
            );


            /**
             * readme.txt
             */
            file_put_contents(
                "{$this->currentDir}/README.md",
                "
## Требования

* php 5.4 + 
* xrandr 1.5 +

```bash
# Для Ubuntu, winetricks зависимости:
sudo add-apt-repository ppa:ubuntu-wine/ppa
sudo apt-get update
sudo apt-get install binutils cabextract p7zip-full unrar unzip wget wine zenity
```

```bash
# Для Ubuntu, зависимости самого скрипта
sudo apt-get install x11-xserver-utils wget php php-cli php-readline php-curl php-gd php-common php-bz2 php-json php-mbstring php-timer php-zip
```

```bash
# Для Ubuntu, проще установить wine из репозиториев, тогда необходимые зависимости установятся сами.
# Остальное подскажет сам скрипт в процессе использования.

sudo apt-get install wine
```

* Чтобы использовать Vulkan, его должны поддерживать:
  * Драйвера на видеокарту, утилита `vulkaninfo` должна говорить что всё ок.
  * Сама видеокарта должна поддерживать Vulkan.
  * Wine сборка должна быть не меньше 3.10 и собрана с поддержкой Vulkan, дистрибутивы из репозиториев ОС обычно собраны без Vulkan.
  * Только после этого можно использовать `dxvk` (d3d11)

## Установка

1) Создать папку (желательно без пробелов в пути и кириллицы)

2) Скопировать туда папку wine, сборки с поддержкой vulkan можно скачать [отсюда](https://yadi.sk/d/IrofgqFSqHsPu), выполнить:
```bash
wget -q -O start https://raw.githubusercontent.com/hitman249/wine-helpers/master/start && chmod +x start
```
3) После чего в папке у вас должны получиться 2 элемента, папка `wine` и рядом файл `start`

4) Запускаете файл `./start`

5) Появится директория `game_info`, редактируете файл `game_info/game_info.ini`

6) Запускаете `./start cfg` чтобы сконфигурировать версию эмулируемой ОС, либо `./start fm`, чтобы запустить 
файловый менеджер.

7) Через файловый менеджер `./start fm` устанавливаете игру.

8) Если требуются дополнительные библиотеки копируете их в папки `dlls` и `dlls64` скрипт создаст симлинки 
файлов в директорию:
    - `dlls`   -> `windows/system32`
    - `dlls64` -> `windows/syswow64`
    
9) Если требуется использовать `*.reg` файлы, копируйте их в папку `regs`

10) Если требуется `winetricks` используйте команду `./start winetricks d3dx9 dxvk63`

11) В папке `additional` можно пробросить папки для сохранений, чтобы они не удалились вместе с `prefix`-ом

12) Файлы игры должны быть в папке `data`

13) В конце удаляете все лишние файлы и папку `prefix`

14) Запускаете `./start`, игра должна запуститься.

15) Если всё корректно запускается, снова удаляете все лишние файлы и папку `prefix`

16) Готово. Игру можно запаковывать.


## Описание 

Этот скрипт предназначен в первую очередь для облегчения
создания и распространения Wine раздач игр/программ, но может применяться
и в других целях. Работа скрипта гарантируется на всех дистрибутивах
Linux, где установлены стандартные утилиты GNU, оболочка bash и php 5.4+.


## Help

```text
Help:
./start                           - Run game.
./start settings                  - Settings game.
./start winetricks d3dx9          - Winetricks install d3dx9.
./start cfg                       - Configure.
./start fm                        - File Manager.
./start regedit (reg)             - Windows Registry Editor.
./start kill                      - Kill this instance Wine.
./start help

./start diff                      - Enable change files analyze from system32, syswow64 folders.
or
./start diff fm
./start diff winetricks d3dx9
./start diff cfg
and others

./start debug                    - Enable debug mode, work analog \"diff\".
./start wine                     - Get Wine Instance.
./start config game_info1.ini    - Use other config.
./start update                   - Update this script.
./start icon                     - Create desktop icon.
./start icon delete (remove)     - Delete desktop icon.
./start version
```

## Возможности

* Автоматизирует работу с отдельным wine префиксом

* Перед запуском игры сохраняет разрешение, яркость и гамму на каждом мониторе в отдельности.

* После завершения игры восстанавливает только изменившиеся параметры разрешение, яркость и гамму, 
в отдельности по каждому параметру и монитору. Т.е. если изменилась гамма на втором мониторе, то 
только она и будет исправлена.

* При использовании `winetricks` он автоматически выкачивается.

* Показывает недостающие либы wine

* Показывает используемую версию Wine, Vulkan, xrandr, winetricks

* Выбор между PulseAudio и ALSA
```ini
[script]
; Set sound driver to PulseAudio or ALSA
pulse = 1
```

* Автоматическое скачивание последнего dxvk
```ini
[script]
; Download latest d3d11.dll and dxgi.dll
dxvk = 1
```

* Выбор версии windows
```ini
[script]
; Windows version (win7, winxp, win2k)
winver = \"win7\"
```

* Возможность использования нескольких ini файлов. Для совмещения нескольких игр в одном префиксе.
```bash
./start config game_info1.ini
```

* Возможность использования хуков после создания префикса, перед запуском и после остановки приложения.
```ini
[hooks]
after_create_prefix[] = \"create.sh\"
before_run_game[] = \"before.sh\"
after_exit_game[] = \"after.sh\"
after_exit_game[] = \"after2.sh\"
```

* Выставление для каждой dll индивидуальных настроек.
```ini
[dlls]
dll[d3d11.dll] = \"nooverride\"
dll[d3d12.dll] = \"builtin\"
dll[d3d13.dll] = \"builtin,native\"
dll[d3d14.dll] = \"native,builtin\"
dll[d3d15.dll] = \"native\"
```

* Возможность зарегистрировать библиотеку через regsvr32.
```ini
[dlls]
dll[l3codecx.ax] = \"register\"
```

* Если в системе не установлен PulseAudio, скрипт автоматически переключит wine на ALSA.

* Библиотеки из папок `dlls` и `dlls64` применяются сразу без пересоздания префикса.

* Обеспечена корректная установка **.NET Framework**

* \"Умное\" создание иконки, создаёт в папке `Games` \ `Игры` если она присутствует на рабочем столе, также ищет файл 
без расширения `.desktop` (иногда нужна иконка без расширения), ищет `png` файлы в качестве картинки, в папках `./` и 
`./game_info`, если таковых несколько предлагает выбрать конкретную.

* Хуки для GPU применяются только один раз, после создания префикса и после хуков на создание префикса.
```ini
[hooks]
gpu_amd[] = \"gpu/amd.sh\"
gpu_nvidia[] = \"gpu/nvidia.sh\"
gpu_intel[] = \"gpu/intel.sh\"
```

* Хук для настроек игры при выполнении команды `./start settings`, выполнится файл заданный в конфигурации секции: 
```ini
[hooks]
settings[] = \"settings.sh\"
```

* Использование ini файла `./game_info/game_info.ini` для настроек:
```ini
[game]
path = \"Program Files/The Super Game\"
additional_path = \"bin\"
exe = \"Game.exe\"
cmd = \"-language=russian\"
name = \"The Super Game: Deluxe Edition\"
version = \"1.0.0\"

[script]
csmt = 1
winetricks = 0

; Not use /home/user directory
sandbox = 1

; Download latest d3d11.dll and dxgi.dll
dxvk = 0

; Windows version (win7, winxp, win2k)
winver = \"win7\"

; Set sound driver to PulseAudio or ALSA
pulse = 1

; Auto fixed resolution, brightness, gamma for all monitors
fixres = 1

[wine]
WINEDEBUG = \"-all\"
WINEARCH = \"win32\"
WINEDLLOVERRIDES = \"\"

[window]
enable = 0
title = \"Wine\"
resolution = \"800x600\"

;
; Additional dlls folder logic
; Example: dll[name_file.dll] = \"nooverride\"
;
; Variables:
; \"builtin\"        - Встроенная
; \"native\"         - Сторонняя (default)
; \"builtin,native\" - Встроенная, Сторонняя
; \"native,builtin\" - Сторонняя, Встроенная
; \"nooverride\"     - Не заносить в реестр
; \"register\"       - Зарегистрировать библиотеку через regsvr32
;
; Настройки относятся только к папке dlls, которая создаёт симлинки в папку system32
;
[dlls]
; dll[d3d11.dll] = \"nooverride\"
; dll[l3codecx.ax] = \"register\"

;
; Хуки
; after_create_prefix - команды выполняются после создания префикса
; before_run_game - команды выполняются перед запуском игры
; after_exit_game - команды выполняются после завершения игры
;
[hooks]
; after_create_prefix[] = \"create.sh\"
; before_run_game[] = \"before.sh\"
; after_exit_game[] = \"after.sh\"
; after_exit_game[] = \"after2.sh\"
; gpu_amd[] = \"gpu/amd.sh\"
; gpu_nvidia[] = \"gpu/nvidia.sh\"
; gpu_intel[] = \"gpu/intel.sh\"
; settings[] = \"settings.sh\"
```  
* Если после `./start` следует аттрибут `diff` а затем команда, то как только команда отработает 
скрипт покажет изменившиеся файлы в директориях `system32`, `syswow64`
  Пример:

```text
change system32 files
--------------------
d3d11.dll
dxgi.dll
--------------------


delete system32 files
--------------------
d3d8.dll
d3dcompiler_33.dll
--------------------
```
 
 ## Полезные ссылки
 
 * dxvk [GPU driver support](https://github.com/doitsujin/dxvk/wiki/Driver-support)
 * dxvk [releases](https://github.com/doitsujin/dxvk/releases)
 * wine builds for support vulkan [yandex disk](https://yadi.sk/d/IrofgqFSqHsPu) 
 or [google disk](https://drive.google.com/open?id=1fTfJQhQSzlEkY-j3g0H6p4lwmQayUNSR)
 * [wine standalone](https://lutris.net/files/runners/)
 * [Installer Repacks](https://repacks.net/)
 "
            );


            /**
             * game_info/hooks/after.sh
             */
            file_put_contents(
                "{$this->gameInfo['HOOKS']}/after.sh",
                '#' ."!/bin/bash\necho \"After!\""
            );


            /**
             * game_info/hooks/before.sh
             */
            file_put_contents(
                "{$this->gameInfo['HOOKS']}/before.sh",
                '#' ."!/bin/bash\necho \"Before!\""
            );


            /**
             * game_info/hooks/create.sh
             */
            file_put_contents(
                "{$this->gameInfo['HOOKS']}/create.sh",
                '#' ."!/bin/bash\necho \"Create prefix!\""
            );


            /**
             * game_info/hooks/settings.sh
             */
            file_put_contents(
                "{$this->gameInfo['HOOKS']}/settings.sh",
                '#' ."!/bin/bash\necho \"Here change game settings!\"\necho \"Run './start settings' exec this file!\""
            );


            if (!file_exists("{$this->gameInfo['HOOKS']}/gpu")) {
                if (!mkdir("{$this->gameInfo['HOOKS']}/gpu", 0775, true) && !is_dir("{$this->gameInfo['HOOKS']}/gpu")) {
                    throw new \RuntimeException(sprintf('Directory "%s" was not created', "{$this->gameInfo['HOOKS']}/gpu"));
                }
            }

            /**
             * game_info/hooks/gpu/amd.sh
             */
            file_put_contents(
                "{$this->gameInfo['HOOKS']}/gpu/amd.sh",
                '#' ."!/bin/bash\necho \"AMD GPU hook!\""
            );


            /**
             * game_info/hooks/gpu/nvidia.sh
             */
            file_put_contents(
                "{$this->gameInfo['HOOKS']}/gpu/nvidia.sh",
                '#' ."!/bin/bash\necho \"NVIDIA GPU hook!\""
            );


            /**
             * game_info/hooks/gpu/intel.sh
             */
            file_put_contents(
                "{$this->gameInfo['HOOKS']}/gpu/intel.sh",
                '#' ."!/bin/bash\necho \"Intel GPU hook!\""
            );
        }


        /**
         * Convert game_info.txt to game_info.ini
         */
        $this->updateInfoFile();


        $gameInfoInit = false;

        if (file_exists($this->gameInfo['INFOFILE'])) {

            $this->config = parse_ini_file($this->gameInfo['INFOFILE'], true);

            if (!empty($this->config['game']['path']) && $this->config['game']['path'] !== 'Program Files/The Super Game') {

                $this->gameInfo['GAME_PATH'] = "{$this->wineConfig['DRIVE_C']}/{$this->config['game']['path']}";
                $this->gameInfo['VERSION']   = $this->config['game']['version'];
                $this->gameInfo['GAME_EXE']  = $this->config['game']['exe'];
                $this->gameInfo['ARGS']      = $this->config['game']['cmd'];
                $this->gameInfo['PATH']      = $this->config['game']['additional_path'];
                $this->gameInfo['GAME']      = $this->config['game']['name'];

                $this->wineConfig['CSMT']              = (bool)$this->config['script']['csmt'];
                $this->wineConfig['SANDBOX']           = (bool)$this->config['script']['sandbox'];
                $this->wineConfig['WINETRICKS_UPDATE'] = (bool)$this->config['script']['winetricks'];
                $this->useXrandr                       = (bool)$this->config['script']['fixres'];
                $this->wineConfig['DXVK']              = (bool)$this->config['script']['dxvk'];
                $this->wineConfig['PULSE']             = (bool)$this->config['script']['pulse'];
                $this->wineConfig['WINVER']            = $this->config['script']['winver'];

                $this->wineConfig['WINEDEBUG']        = $this->config['wine']['WINEDEBUG'];
                $this->wineConfig['WINEARCH']         = $this->config['wine']['WINEARCH'];
                $this->wineConfig['WINEDLLOVERRIDES'] = $this->config['wine']['WINEDLLOVERRIDES'];

                $this->wineConfig['VIRTUAL_DESKTOP_ENABLE'] = (bool)$this->config['window']['enable'];
                $this->wineConfig['VIRTUAL_DESKTOP']        = "explorer \"/desktop={$this->config['window']['title']},{$this->config['window']['resolution']}\"";

                $gameInfoInit = true;
            } else {
                $this->log('Please configure game_info.ini file!');
                exit(0);
            }
        }

        if ($gameInfoInit === false) {
            $this->log('There is no game_info.ini file!');
            exit(0);
        }

        $isWine = trim($this->runExternal("which \"{$this->wineConfig['WINE']}\""));

        if (!$isWine) {
            $this->log('There is no Wine available in your system!');
            exit(0);
        }


        /**
         * Create symlink to game directory
         */
        $this->createGameDirectory();


        /**
         * Enable or disable CSMT
         */
        $this->updateCsmt();


        /**
         * Copy required dlls and override them
         */
        $this->updateDlls();


        /**
         * Set sound driver to PulseAudio; Borrowed from winetricks
         */
        $this->updatePulse();


        /**
         * Set windows version; Borrowed from winetricks
         */
        $this->updateWinVersion();


        /**
         * Install latest dxvk (d3d11.dll and dxgi.dll)
         */
        $this->updateDxvk();


        if ($this->useXrandr) {
            $this->xrandr = (bool)trim($this->runExternal("which xrandr"));
        }


        $this->vulkan = (bool)trim($this->runExternal("which vulkaninfo"));
    }

    private function downloadWinetricks()
    {
        if (!file_exists("{$this->currentDir}/winetricks")) {
            $url = 'https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks';
            $winetricks = file_get_contents($url);
            file_put_contents("{$this->currentDir}/winetricks", $winetricks);
            $this->runExternal("chmod +x \"{$this->currentDir}/winetricks\"");
            $this->log("Success downloaded winetricks.\n");
        }

        $this->winetricksVersion();
    }

    private function winetricksVersion()
    {
        $winetricks = file_get_contents("{$this->currentDir}/winetricks");
        foreach (explode("\n", $winetricks) as $line) {
            if (strpos($line, 'WINETRICKS_VERSION') !== false) {
                $this->log("{$line}\n");
                unset($winetricks);
                return;
            }
        }
    }

    private function checkLibs()
    {
        $help = $this->runExternal("\"{$this->wineConfig['WINE']}\" --help");

        if (strpos($help, '--check-libs') === false) {
            return;
        }

        $result = $this->runExternal("\"{$this->wineConfig['WINE']}\" --check-libs");
        $result = array_filter(
            array_map('trim', explode("\n", $result)),
            function ($line) {
                if (!$line) {
                    return false;
                }

                list($left, $right) = array_map(
                    function ($s) {return trim($s, " \t\n\r\0\x0B.");},
                    explode(':', $line)
                );

                return strpos($right, '.') === false;
            }
        );

        if ($result) {
            $result = implode(
                "\n",
                array_merge([
                    "Wine missing libs",
                    "(Not all libraries are required)",
                    "--------------------"
                ], $result)
            );

            $this->log("{$result}\n");
        }
    }

    private function wineVersion()
    {
        $version = trim($this->runExternal("\"{$this->wineConfig['WINE']}\" --version"));
        $csmt = $this->wineConfig['CSMT'] ? 'with CSMT enabled' : '';

        $this->log("Using {$version} ({$this->wineConfig['WINEARCH']}) {$csmt}\n");
    }

    private function xrandrVersion()
    {
        if (!$this->xrandr) {
            return;
        }

        $version = trim($this->runExternal("xrandr --version"));
        $this->log("{$version}\n");
    }

    private function vulkanVersion()
    {
        if (!$this->vulkan) {
            return;
        }

        $version = trim($this->runExternal("vulkaninfo --json"));
        $version = json_decode($version, true);
        $this->log("Vulkan API version: {$version['comments']['vulkanApiVersion']}\n");
    }

    private function gameVersion()
    {
        $this->log("\nRunning {$this->gameInfo['GAME']} version {$this->gameInfo['VERSION']}\n");
    }

    private function createGameDirectory()
    {
        /**
         * Create symlink to game directory
         */
        if (!file_exists($this->gameInfo['GAME_PATH']) && file_exists($this->wineConfig['WINEPREFIX'])) {

            $data = $this->relativePath($this->gameInfo['DATA']);
            $game = $this->gameInfo['GAME_PATH'];
            $this->runExternal("mkdir -p \"{$game}\" && rm -r \"{$game}\" && ln -sfr \"{$data}\" \"{$game}\"");

            $gameFolder = trim(str_replace($this->wineConfig['DRIVE_C'], '', $this->gameInfo['GAME_PATH']), " \t\n\r\0\x0B/");
            $this->log("Create symlink to game directory: \"{$gameFolder}\"\n");
        }
    }

    private function runExternal($cmd, $outputConsole=false)
    {
        $exported = [
            'export WINE'             => $this->wineConfig['WINE'],
            'export WINEPREFIX'       => $this->wineConfig['WINEPREFIX'],
            'export WINEBOOT'         => $this->wineConfig['WINEBOOT'],
            'export WINEFILE'         => $this->wineConfig['WINEFILE'],
            'export WINECFG'          => $this->wineConfig['WINECFG'],
            'export WINESERVER'       => $this->wineConfig['WINESERVER'],
            'export REGEDIT'          => $this->wineConfig['REGEDIT'],
            'export WINEARCH'         => $this->wineConfig['WINEARCH'],
            'export WINEDEBUG'        => $this->wineConfig['WINEDEBUG'],
            'export WINEDLLOVERRIDES' => $this->wineConfig['WINEDLLOVERRIDES'],
            'export LD_LIBRARY_PATH'  => "\$LD_LIBRARY_PATH:{$this->currentDir}/wine/lib:{$this->currentDir}/wine/lib64",
        ];

        $prefix = [];

        foreach ($exported as $key => $value) {
            $prefix[] = "{$key}=\"{$value}\";";
        }

        $prefix = implode(' ', $prefix);

        $cmd = "{$prefix} {$cmd}";


        if ($outputConsole) {

            system($cmd);

            return '';
        }

        $descriptorspec = array(
            0 => array("pipe", "r"), // stdin is a pipe that the child will read from
            1 => array("pipe", "w"), // stdout is a pipe that the child will write to
            2 => array("pipe", "w") // stderr is a file to write to
        );

        $pipes = array();
        $process = proc_open($cmd, $descriptorspec, $pipes);

        $output = "";

        if (!is_resource($process)) return false;

        #close child's input imidiately
        fclose($pipes[0]);

        stream_set_blocking($pipes[1], false);
        stream_set_blocking($pipes[2], false);

        $todo = array($pipes[1], $pipes[2]);

        while (true) {
            $read = array();
            if (!feof($pipes[1])) $read[] = $pipes[1];
            if (!feof($pipes[2])) $read[] = $pipes[2];

            if (!$read) break;

            $ready = @stream_select($read, $write = NULL, $ex = NULL, 2);

            if ($ready === false) {
                break; #should never happen - something died
            }

            foreach ($read as $r) {
                $s = fread($r, 1024);
                $output .= $s;
            }
        }

        fclose($pipes[1]);
        fclose($pipes[2]);

        #$code = proc_close($process);

        return $output;
    }

    private function log($text='')
    {
        print "{$text}\n";
    }

    private function relativePath($absPath)
    {
        return trim(str_replace($this->currentDir, '', $absPath), " \t\n\r\0\x0B/");
    }

    private function resolutions()
    {
        if (!$this->xrandr) {
            return;
        }

        $head = '/^(.*) connected( | primary )([0-9]{3,4}x[0-9]{3,4}).*\n*/m';
        $dump = $this->runExternal('xrandr --verbose');
        $array = explode("\n", $dump);
        $monitors = [];

        preg_match_all($head, $dump, $matches);

        foreach ($matches[0] as $i => $_line) {
            $monitors[$matches[1][$i]] = [
                'output' => $matches[1][$i],
                'resolution' => $matches[3][$i],
            ];

            $inner = false;
            foreach ($array as $line) {
                if (!$line || !$_line) {
                    continue;
                }
                if ($inner === false && strpos($_line, $line) !== false) {
                    $inner = true;
                } elseif ($inner) {
                    if (strpos($line, 'connected') !== false || strpos($line, 'disconnected') !== false) {
                        $inner = false;
                    } else {
                        if (isset($monitors[$matches[1][$i]]['brightness'], $monitors[$matches[1][$i]]['gamma'])) {
                            $inner = false;
                            break;
                        }
                        if (strpos($line, 'Brightness:') !== false) {
                            $value = trim(str_replace('Brightness:', '', $line));
                            $monitors[$matches[1][$i]]['brightness'] = $value;
                        }
                        if (strpos($line, 'Gamma:') !== false) {
                            $value = trim(str_replace('Gamma:', '', $line));
                            $monitors[$matches[1][$i]]['gamma'] = $value;
                        }
                    }
                }
            }
        }

        return $monitors;
    }

    private function restoreResolutions()
    {
        if (!$this->xrandr) {
            return;
        }

        $monitors = $this->resolutions();

        foreach ($this->monitors?:[] as $output => $params) {
            if ($monitors[$output]) {
                if ($params['gamma'] !== $monitors[$output]['gamma']) {
                    $this->runExternal("\"{$this->wineConfig['WINESERVER']}\" -w && xrandr --output {$output} --gamma {$params['gamma']}");
                    $this->log("Revert gamma, output {$output}, gamma {$monitors[$output]['gamma']} > {$params['gamma']}.\n");
                }
                if ($params['brightness'] !== $monitors[$output]['brightness']) {
                    $this->runExternal("\"{$this->wineConfig['WINESERVER']}\" -w && xrandr --output {$output} --brightness {$params['brightness']}");
                    $this->log("Revert brightness, output {$output}, brightness {$monitors[$output]['brightness']} > {$params['brightness']}.\n");
                }
                if ($params['resolution'] !== $monitors[$output]['resolution']) {
                    $this->runExternal("\"{$this->wineConfig['WINESERVER']}\" -w && xrandr --output {$output} --mode {$params['resolution']}");
                    $this->log("Revert brightness, output {$output}, brightness {$monitors[$output]['resolution']} > {$params['resolution']}.\n");
                }
            }
        }
    }

    private function getSnapshot()
    {
        $result   = ['system32' => [], 'syswow64' => []];
        $system32 = "{$this->wineConfig['DRIVE_C']}/windows/system32";
        $syswow64 = "{$this->wineConfig['DRIVE_C']}/windows/syswow64";

        if (file_exists($system32)) {
            foreach (glob("{$system32}/*") as $filePath) {
                if (!is_dir($filePath)) {
                    $result['system32'][md5_file($filePath)] = basename($filePath);
                }
            }
        }

        if (file_exists($syswow64)) {
            foreach (glob("{$syswow64}/*") as $filePath) {
                if (!is_dir($filePath)) {
                    $result['syswow64'][md5_file($filePath)] = basename($filePath);
                }
            }
        }

        return $result;
    }

    private function diff()
    {
        $changeFiles = ['system32' => [], 'syswow64' => []];
        $deleteFiles = ['system32' => [], 'syswow64' => []];

        $newSnapshot = $this->getSnapshot();
        $newSnapshotFlip = [
            'system32' => array_flip($newSnapshot['system32']),
            'syswow64' => array_flip($newSnapshot['syswow64'])
        ];

        $oldSnapshot = $this->diff?:['system32' => [], 'syswow64' => []];

        foreach (['system32', 'syswow64'] as $type) {
            foreach ($oldSnapshot[$type] as $md5 => $name) {
                if (!empty($newSnapshot[$type][$md5])
                    && !empty($newSnapshotFlip[$type][$name])
                    && $md5 === $newSnapshotFlip[$type][$name]
                    && $name === $newSnapshot[$type][$md5])
                {
                    unset($newSnapshot[$type][$md5]);
                    continue;
                }
                if (!empty($newSnapshotFlip[$type][$name])) {
                    $changeFiles[$type][$newSnapshotFlip[$type][$name]] = $name;
                    unset($newSnapshot[$type][$newSnapshotFlip[$type][$name]]);
                    continue;
                }

                $deleteFiles[$type][$md5] = $name;
            }
        }

        foreach (['system32', 'syswow64'] as $type) {
            foreach ($newSnapshot[$type] as $md5 => $name) {
                $changeFiles[$type][$md5] = $name;
            }
        }

        if ($changeFiles['system32'] || $changeFiles['syswow64']) {
            if ($changeFiles['system32']) {
                $change = array_merge(['', 'change system32 files', '--------------------'], $changeFiles['system32'], ['--------------------', '']);
                $this->log(implode("\n", $change));
            }
            if ($changeFiles['syswow64']) {
                $change = array_merge(['', 'change syswow64 files', '--------------------'], $changeFiles['syswow64'], ['--------------------', '']);
                $this->log(implode("\n", $change));
            }
        }

        if ($deleteFiles['system32'] || $deleteFiles['syswow64']) {
            if ($deleteFiles['system32']) {
                $change = array_merge(['', 'delete system32 files', '--------------------'], $deleteFiles['system32'], ['--------------------', '']);
                $this->log(implode("\n", $change));
            }
            if ($deleteFiles['syswow64']) {
                $change = array_merge(['', 'delete syswow64 files', '--------------------'], $deleteFiles['syswow64'], ['--------------------', '']);
                $this->log(implode("\n", $change));
            }
        }
    }

    private function quoteArgs($args)
    {
        return implode(' ', array_map(function ($a) {return "\"{$a}\"";}, $args));
    }

    private function updateInfoFile()
    {
        /**
         * Convert game_info.txt to game_info.ini
         */
        if (!file_exists($this->gameInfo['INFOFILE']) && file_exists("{$this->gameInfo['DIR']}/game_info.txt")) {

            $defaultConfig = parse_ini_string($this->getDefaultConfig(), true);
            $gameInfoFile = explode("\n", file_get_contents("{$this->gameInfo['DIR']}/game_info.txt"));

            $defaultConfig['game']['path']            = $gameInfoFile[0];
            $defaultConfig['game']['version']         = $gameInfoFile[1];
            $defaultConfig['game']['exe']             = $gameInfoFile[2];
            $defaultConfig['game']['cmd']             = $gameInfoFile[3];
            $defaultConfig['game']['additional_path'] = $gameInfoFile[4];
            $defaultConfig['game']['name']            = $gameInfoFile[5];

            $this->writeIniFile($this->gameInfo['INFOFILE'], $defaultConfig);

            $this->log("Convert game_info.txt to game_info.ini.\n");

        }
    }

    private function updateDlls()
    {
        if (!file_exists($this->wineConfig['WINEPREFIX'])) {
            return;
        }

        /**
         * Copy required dlls and override them
         */
        $dlls     = [];
        $isDll32  = file_exists($this->gameInfo['DLL32']);
        $isDll64  = file_exists($this->gameInfo['DLL64']);
        $isChange = false;

        if ($isDll32) {
            foreach (glob("{$this->gameInfo['DLL32']}/*.dll") as $filePath) {
                $fileName = basename($filePath);
                $to = "{$this->wineConfig['DRIVE_C']}/windows/system32/{$fileName}";
                $dlls[$fileName] = 'native';

                if (file_exists($to)) {
                    if (md5_file($filePath) === md5_file($to)) {
                        continue;
                    } else {
                        unlink($to);
                    }
                }

                $isChange = true;
                $dll32 = $this->relativePath($this->gameInfo['DLL32']);
                $this->runExternal("ln -sfr \"{$dll32}/{$fileName}\" \"{$this->wineConfig['DRIVE_C']}/windows/system32\"");
            }
        }

        if ($isDll64) {
            foreach (glob("{$this->gameInfo['DLL64']}/*.dll") as $filePath) {
                $fileName = basename($filePath);
                $to = "{$this->wineConfig['DRIVE_C']}/windows/syswow64/{$fileName}";
                $dlls[$fileName] = 'native';

                if (file_exists($to)) {
                    if (md5_file($filePath) === md5_file($to)) {
                        continue;
                    } else {
                        unlink($to);
                    }
                }

                $isChange = true;
                $dll32 = $this->relativePath($this->gameInfo['DLL64']);
                $this->runExternal("ln -sfr \"{$dll32}/{$fileName}\" \"{$this->wineConfig['DRIVE_C']}/windows/syswow64\"");
            }
        }

        if ($isChange) {
            $dlls = array_filter($dlls);
            if ($dlls) {
//                $this->runExternal("\"{$this->wineConfig['WINE']}\" reg delete \"HKEY_CURRENT_USER\\Software\\Wine\\DllOverrides\" /f");

                foreach ($dlls as $dll => $typeOverride) {
                    if ($this->config && !empty($this->config['dlls']) && !empty($this->config['dlls']['dll']) && !empty($this->config['dlls']['dll'][$dll])) {
                        if ($this->config['dlls']['dll'][$dll] === 'nooverride') {
                            continue;
                        }
                        if ($this->config['dlls']['dll'][$dll] === 'register') {
                            $this->runExternal("\"{$this->wineConfig['WINE']}\" regsvr32 \"{$dll}\"");
                            continue;
                        }

                        $typeOverride = $this->config['dlls']['dll'][$dll];
                    }

                    $this->runExternal("\"{$this->wineConfig['WINE']}\" reg add \"HKEY_CURRENT_USER\\Software\\Wine\\DllOverrides\" /v \"{$dll}\" /d \"{$typeOverride}\" /f");
                }

                $this->log("Update dll overrides.\n");
            }
        }
    }

    private function updateCsmt()
    {
        if (!file_exists($this->wineConfig['WINEPREFIX'])) {
            return;
        }

        $reg = [
            "Windows Registry Editor Version 5.00\n",
            "[HKEY_CURRENT_USER\Software\Wine\Direct3D]\n",
        ];

        if ($this->wineConfig['CSMT'] && !file_exists("{$this->wineConfig['DRIVE_C']}/csmt.reg")) {
            $reg[] = "\"csmt\"=-\n";
            file_put_contents("{$this->wineConfig['DRIVE_C']}/csmt.reg", implode("\n", $reg));
            $this->runExternal("\"{$this->wineConfig['REGEDIT']}\" \"{$this->wineConfig['DRIVE_C']}/csmt.reg\"");

            $this->log("Set enable CSMT.\n");
        } elseif ($this->wineConfig['CSMT'] === false && file_exists("{$this->wineConfig['DRIVE_C']}/csmt.reg")) {
            $reg[] = "\"csmt\"=dword:0\n";
            file_put_contents("{$this->wineConfig['DRIVE_C']}/csmt.reg", implode("\n", $reg));
            $this->runExternal("\"{$this->wineConfig['REGEDIT']}\" \"{$this->wineConfig['DRIVE_C']}/csmt.reg\"");
            unlink("{$this->wineConfig['DRIVE_C']}/csmt.reg");

            $this->log("Set disable CSMT.\n");
        }
    }

    private function updatePulse()
    {
        if (!file_exists($this->wineConfig['WINEPREFIX'])) {
            return;
        }

        $reg = [
            "Windows Registry Editor Version 5.00\n",
            "[HKEY_CURRENT_USER\Software\Wine\Drivers]\n",
        ];

        $isInstallPulseAudio = (bool)trim($this->runExternal("which pulseaudio"));

        if ($isInstallPulseAudio === false && $this->wineConfig['PULSE'] === true) {
            $this->wineConfig['PULSE'] = false;
        }

        if ($this->wineConfig['PULSE'] && !file_exists("{$this->wineConfig['DRIVE_C']}/usepulse.reg")) {

            $reg[] = "\"Audio\"=\"pulse\"\n";
            file_put_contents("{$this->wineConfig['DRIVE_C']}/usepulse.reg", implode("\n", $reg));
            $this->runExternal("\"{$this->wineConfig['REGEDIT']}\" \"{$this->wineConfig['DRIVE_C']}/usepulse.reg\"");

            if (file_exists("{$this->wineConfig['DRIVE_C']}/usealsa.reg")) {
                unlink("{$this->wineConfig['DRIVE_C']}/usealsa.reg");
            }

            $this->log("Set sound driver to PulseAudio.\n");

        } elseif ($this->wineConfig['PULSE'] === false && !file_exists("{$this->wineConfig['DRIVE_C']}/usealsa.reg")) {

            $reg[] = "\"Audio\"=\"alsa\"\n";
            file_put_contents("{$this->wineConfig['DRIVE_C']}/usealsa.reg", implode("\n", $reg));
            $this->runExternal("\"{$this->wineConfig['REGEDIT']}\" \"{$this->wineConfig['DRIVE_C']}/usealsa.reg\"");

            if (file_exists("{$this->wineConfig['DRIVE_C']}/usepulse.reg")) {
                unlink("{$this->wineConfig['DRIVE_C']}/usepulse.reg");
            }

            $this->log("Set sound driver to ALSA.\n");
        }
    }

    private function updateWinVersion()
    {
        if (!file_exists($this->wineConfig['WINEPREFIX'])) {
            return;
        }

        $lastwin = "{$this->wineConfig['DRIVE_C']}/lastwin";

        if (file_exists($lastwin)) {
            $winver = trim(file_get_contents($lastwin));

            if ($winver === $this->wineConfig['WINVER']) {
                return;
            }
        }

        $default = [];
        $defaultWinver = 'win7';

        $reg = [
            "Windows Registry Editor Version 5.00\n",
        ];

        switch ($this->wineConfig['WINVER']) {
            case 'win2k';
                $defaultWinver = 'win2k';
                $default = [
                    'HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion' => [
                        'CSDVersion'         => 'Service Pack 4',
                        'CurrentBuildNumber' => '2195',
                        'CurrentVersion'     => '5.0',
                    ],
                    'HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Windows'     => [
                        'CSDVersion' => 'dword:00000400',
                    ],
                ];
                break;

            case 'winxp';
                $defaultWinver = 'winxp';
                $default = [
                    'HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion' => [
                        'CSDVersion'         => 'Service Pack 3',
                        'CurrentBuildNumber' => '2600',
                        'CurrentVersion'     => '5.1',
                    ],
                    'HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Windows'     => [
                        'CSDVersion' => 'dword:00000300',
                    ],
                ];
                break;

            case 'win7':
            default:
                $this->runExternal("\"{$this->wineConfig['WINE']}\" reg add \"HKLM\\System\\CurrentControlSet\\Control\\ProductOptions\" /v ProductType /d \"WinNT\" /f");
                $defaultWinver = 'win7';
                $default = [
                    'HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion' => [
                        'CSDVersion'         => 'Service Pack 1',
                        'CurrentBuildNumber' => '7601',
                        'CurrentVersion'     => '6.1',
                    ],
                    'HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Windows'     => [
                        'CSDVersion' => 'dword:00000100',
                    ],
                ];
        }

        foreach ($default as $path => $values) {
            $reg[] = "\n[{$path}]\n";
            foreach ($values as $key => $value) {
                $reg[] = "\"{$key}\"=\"{$value}\"\n";
            }
        }

        file_put_contents($lastwin, $defaultWinver);
        file_put_contents("{$this->wineConfig['DRIVE_C']}/setwinver.reg", implode('', $reg));

        $this->runExternal("\"{$this->wineConfig['REGEDIT']}\" \"{$this->wineConfig['DRIVE_C']}/setwinver.reg\"");

        $this->log("Set Windows version: {$defaultWinver}.\n");
    }

    private function updateDxvk()
    {
        if (!file_exists($this->wineConfig['WINEPREFIX'])) {
            return;
        }

        $dxvk = "{$this->wineConfig['DRIVE_C']}/dxvk";

        if ($this->wineConfig['DXVK'] && file_exists($dxvk)) {
            return;
        }

        /**
         * Install latest dxvk (d3d11.dll and dxgi.dll)
         */
        if ($this->wineConfig['DXVK']) {
            $this->winetricks(['dxvk']);
            file_put_contents($dxvk, ' ');
        } else if (file_exists($dxvk)) {
            unlink($dxvk);
        }
    }

    private function firedHooksCreatePrefix($type = 'after_create_prefix')
    {
        if (!file_exists($this->wineConfig['WINEPREFIX']) || !file_exists($this->gameInfo['HOOKS'])) {
            return;
        }

        if ($this->config && !empty($this->config['hooks']) && !empty($this->config['hooks'][$type])) {
            foreach ((array)$this->config['hooks'][$type] as $hookCmd) {
                $hookCmd = trim($hookCmd);
                if (!$hookCmd) {
                    continue;
                }

                $trimHook = trim($hookCmd, '&');

                if (file_exists("{$this->gameInfo['HOOKS']}/{$trimHook}")) {
                    $this->log("Run {$trimHook}\n");
                    $this->runExternal("cd \"{$this->gameInfo['HOOKS']}\"; chmod +x " . $trimHook . "; ./{$hookCmd}", true);
                }
            }
        }
    }

    private function firedHooksBeforeRun()
    {
        $this->firedHooksCreatePrefix('before_run_game');
    }

    private function firedHooksAfterExit()
    {
        $this->firedHooksCreatePrefix('after_exit_game');
    }

    private function firedHooksGPU()
    {
        if (!file_exists($this->wineConfig['WINEPREFIX']) || !file_exists($this->gameInfo['HOOKS']) || !$this->gpu) {
            return;
        }


        if (!empty($this->config['hooks']) && !empty($this->config['hooks']["gpu_{$this->gpu}"])) {
            $hooks = (array)$this->config['hooks']["gpu_{$this->gpu}"];

            foreach ($hooks as $hook) {
                $hookCmd = trim($hook);
                if (!$hookCmd) {
                    continue;
                }

                $trimHook = trim($hookCmd, '&');

                if (file_exists("{$this->gameInfo['HOOKS']}/{$trimHook}")) {
                    $this->log("Run {$trimHook}\n");
                    $this->runExternal("cd \"{$this->gameInfo['HOOKS']}\"; chmod +x " . $trimHook . "; ./{$hookCmd}", true);
                }
            }
        }
    }

    private function getDefaultConfig()
    {
        return "[game]
path = \"Program Files/The Super Game\"
additional_path = \"bin\"
exe = \"Game.exe\"
cmd = \"-language=russian\"
name = \"The Super Game: Deluxe Edition\"
version = \"1.0.0\"

[script]
csmt = 1
winetricks = 0

; Not use /home/user directory
sandbox = 1

; Download latest d3d11.dll and dxgi.dll
dxvk = 0

; Windows version (win7, winxp, win2k)
winver = \"win7\"

; Set sound driver to PulseAudio or ALSA
pulse = 1

; Auto fixed resolution, brightness, gamma for all monitors
fixres = 1

[wine]
WINEDEBUG = \"-all\"
WINEARCH = \"win32\"
WINEDLLOVERRIDES = \"\"

[window]
enable = 0
title = \"Wine\"
resolution = \"800x600\"

;
; Additional dlls folder logic
; Example: dll[name_file.dll] = \"nooverride\"
;
; Variables:
; \"builtin\"        - Встроенная
; \"native\"         - Сторонняя (default)
; \"builtin,native\" - Встроенная, Сторонняя
; \"native,builtin\" - Сторонняя, Встроенная
; \"nooverride\"     - Не заносить в реестр
; \"register\"       - Зарегистрировать библиотеку через regsvr32
;
; Настройки относятся только к папке dlls, которая создаёт симлинки в папку system32
;
[dlls]
; dll[d3d11.dll] = \"nooverride\"
; dll[l3codecx.ax] = \"register\"

;
; Хуки
; after_create_prefix - команды выполняются после создания префикса
; before_run_game - команды выполняются перед запуском игры
; after_exit_game - команды выполняются после завершения игры
;
[hooks]
; after_create_prefix[] = \"create.sh\"
; before_run_game[] = \"before.sh\"
; after_exit_game[] = \"after.sh\"
; after_exit_game[] = \"after2.sh\"
; gpu_amd[] = \"gpu/amd.sh\"
; gpu_nvidia[] = \"gpu/nvidia.sh\"
; gpu_intel[] = \"gpu/intel.sh\"
; settings[] = \"settings.sh\"";
    }

    private function writeIniFile($file, $array = [])
    {
        if (!is_string($file)) { throw new \InvalidArgumentException('Function argument 1 must be a string.'); }
        if (!is_array($array)) { throw new \InvalidArgumentException('Function argument 2 must be an array.'); }
        $data = array();
        foreach ($array as $key => $val) {
            if (is_array($val)) {
                $data[] = "[$key]";
                foreach ($val as $skey => $sval) {
                    if (is_array($sval)) {
                        foreach ($sval as $_skey => $_sval) {
                            if (is_numeric($_skey)) { $data[] = $skey . '[] = ' . (is_numeric($_sval) ? $_sval : (ctype_upper($_sval) ? $_sval : '"' . $_sval . '"')); }
                            else { $data[] = $skey . '[' . $_skey . '] = ' . (is_numeric($_sval) ? $_sval : (ctype_upper($_sval) ? $_sval : '"' . $_sval . '"')); }
                        }
                    } else { $data[] = $skey . ' = ' . (is_numeric($sval) ? $sval : (ctype_upper($sval) ? $sval : '"' . $sval . '"')); }
                }
            } else { $data[] = $key . ' = ' . (is_numeric($val) ? $val : (ctype_upper($val) ? $val : '"' . $val . '"')); }
            $data[] = null;
        }
        $fp          = fopen($file, 'w');
        $retries     = 0;
        $max_retries = 100;
        if (!$fp) { return false; }
        do { if ($retries > 0) { usleep(rand(1, 5000)); } $retries += 1;
        } while (!flock($fp, LOCK_EX) && $retries <= $max_retries);
        if ($retries == $max_retries) { return false; }
        fwrite($fp, implode(PHP_EOL, $data) . PHP_EOL);
        flock($fp, LOCK_UN);
        fclose($fp);

        return true;
    }

    private function getTypeGPU()
    {
        $isGlxinfo = $this->runExternal("which glxinfo");

        if ($isGlxinfo) {
            $type = trim($this->runExternal('glxinfo | grep -E "(ATI|AMD)"'));

            if ($type) {
                return 'amd';
            }

            $type = trim($this->runExternal('glxinfo | grep "NVIDIA"'));

            if ($type) {
                return 'nvidia';
            }

            $type = trim($this->runExternal('glxinfo | grep "Intel"'));

            if ($type) {
                return 'intel';
            }
        }

        return null;
    }
}

$start = new Start($argv);
$start->start();